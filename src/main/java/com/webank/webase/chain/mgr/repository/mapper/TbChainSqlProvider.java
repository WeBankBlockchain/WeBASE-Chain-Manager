package com.webank.webase.chain.mgr.repository.mapper;

import com.webank.webase.chain.mgr.repository.bean.TbChain;
import org.apache.ibatis.jdbc.SQL;
import com.webank.webase.chain.mgr.repository.bean.TbChainExample.Criteria;
import com.webank.webase.chain.mgr.repository.bean.TbChainExample.Criterion;
import com.webank.webase.chain.mgr.repository.bean.TbChainExample;
import java.util.List;
import java.util.Map;

public class TbChainSqlProvider {

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public static final String ALL_COLUMN_FIELDS = "chain_id,chain_name,chain_type,description,create_time,modify_time,version,consensus_type,storage_type,chain_status,webase_sign_addr,deploy_type,remark";

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String countByExample(TbChainExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("tb_chain");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String deleteByExample(TbChainExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("tb_chain");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String insertSelective(TbChain record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_chain");
        if (record.getChainId() != null) {
            sql.VALUES("chain_id", "#{chainId,jdbcType=INTEGER}");
        }
        if (record.getChainName() != null) {
            sql.VALUES("chain_name", "#{chainName,jdbcType=VARCHAR}");
        }
        if (record.getChainType() != null) {
            sql.VALUES("chain_type", "#{chainType,jdbcType=TINYINT}");
        }
        if (record.getDescription() != null) {
            sql.VALUES("description", "#{description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.VALUES("modify_time", "#{modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getVersion() != null) {
            sql.VALUES("version", "#{version,jdbcType=VARCHAR}");
        }
        if (record.getConsensusType() != null) {
            sql.VALUES("consensus_type", "#{consensusType,jdbcType=VARCHAR}");
        }
        if (record.getStorageType() != null) {
            sql.VALUES("storage_type", "#{storageType,jdbcType=VARCHAR}");
        }
        if (record.getChainStatus() != null) {
            sql.VALUES("chain_status", "#{chainStatus,jdbcType=TINYINT}");
        }
        if (record.getWebaseSignAddr() != null) {
            sql.VALUES("webase_sign_addr", "#{webaseSignAddr,jdbcType=VARCHAR}");
        }
        if (record.getDeployType() != null) {
            sql.VALUES("deploy_type", "#{deployType,jdbcType=TINYINT}");
        }
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=LONGVARCHAR}");
        }
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String selectByExampleWithBLOBs(TbChainExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("chain_id");
        } else {
            sql.SELECT("chain_id");
        }
        sql.SELECT("chain_name");
        sql.SELECT("chain_type");
        sql.SELECT("description");
        sql.SELECT("create_time");
        sql.SELECT("modify_time");
        sql.SELECT("version");
        sql.SELECT("consensus_type");
        sql.SELECT("storage_type");
        sql.SELECT("chain_status");
        sql.SELECT("webase_sign_addr");
        sql.SELECT("deploy_type");
        sql.SELECT("remark");
        sql.FROM("tb_chain");
        applyWhere(sql, example, false);
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String selectByExample(TbChainExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("chain_id");
        } else {
            sql.SELECT("chain_id");
        }
        sql.SELECT("chain_name");
        sql.SELECT("chain_type");
        sql.SELECT("description");
        sql.SELECT("create_time");
        sql.SELECT("modify_time");
        sql.SELECT("version");
        sql.SELECT("consensus_type");
        sql.SELECT("storage_type");
        sql.SELECT("chain_status");
        sql.SELECT("webase_sign_addr");
        sql.SELECT("deploy_type");
        sql.FROM("tb_chain");
        applyWhere(sql, example, false);
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        // add pagination for mysql with limit clause 
        StringBuilder sqlBuilder = new StringBuilder(sql.toString());
        if (example != null && (example.getStart() > -1 || example.getCount() > -1)) {
            sqlBuilder.append(" limit ");
            if (example.getStart() > -1 && example.getCount() > -1) {
                sqlBuilder.append(example.getStart()).append(",").append(example.getCount());
            } else if (example.getStart() > -1) {
                sqlBuilder.append(example.getStart());
            } else if (example.getCount() > -1) {
                sqlBuilder.append(example.getCount());
            }
        }
        return sqlBuilder.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TbChain record = (TbChain) parameter.get("record");
        TbChainExample example = (TbChainExample) parameter.get("example");
        SQL sql = new SQL();
        sql.UPDATE("tb_chain");
        if (record.getChainId() != null) {
            sql.SET("chain_id = #{record.chainId,jdbcType=INTEGER}");
        }
        if (record.getChainName() != null) {
            sql.SET("chain_name = #{record.chainName,jdbcType=VARCHAR}");
        }
        if (record.getChainType() != null) {
            sql.SET("chain_type = #{record.chainType,jdbcType=TINYINT}");
        }
        if (record.getDescription() != null) {
            sql.SET("description = #{record.description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getVersion() != null) {
            sql.SET("version = #{record.version,jdbcType=VARCHAR}");
        }
        if (record.getConsensusType() != null) {
            sql.SET("consensus_type = #{record.consensusType,jdbcType=VARCHAR}");
        }
        if (record.getStorageType() != null) {
            sql.SET("storage_type = #{record.storageType,jdbcType=VARCHAR}");
        }
        if (record.getChainStatus() != null) {
            sql.SET("chain_status = #{record.chainStatus,jdbcType=TINYINT}");
        }
        if (record.getWebaseSignAddr() != null) {
            sql.SET("webase_sign_addr = #{record.webaseSignAddr,jdbcType=VARCHAR}");
        }
        if (record.getDeployType() != null) {
            sql.SET("deploy_type = #{record.deployType,jdbcType=TINYINT}");
        }
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=LONGVARCHAR}");
        }
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_chain");
        sql.SET("chain_id = #{record.chainId,jdbcType=INTEGER}");
        sql.SET("chain_name = #{record.chainName,jdbcType=VARCHAR}");
        sql.SET("chain_type = #{record.chainType,jdbcType=TINYINT}");
        sql.SET("description = #{record.description,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        sql.SET("version = #{record.version,jdbcType=VARCHAR}");
        sql.SET("consensus_type = #{record.consensusType,jdbcType=VARCHAR}");
        sql.SET("storage_type = #{record.storageType,jdbcType=VARCHAR}");
        sql.SET("chain_status = #{record.chainStatus,jdbcType=TINYINT}");
        sql.SET("webase_sign_addr = #{record.webaseSignAddr,jdbcType=VARCHAR}");
        sql.SET("deploy_type = #{record.deployType,jdbcType=TINYINT}");
        sql.SET("remark = #{record.remark,jdbcType=LONGVARCHAR}");
        TbChainExample example = (TbChainExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_chain");
        sql.SET("chain_id = #{record.chainId,jdbcType=INTEGER}");
        sql.SET("chain_name = #{record.chainName,jdbcType=VARCHAR}");
        sql.SET("chain_type = #{record.chainType,jdbcType=TINYINT}");
        sql.SET("description = #{record.description,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        sql.SET("version = #{record.version,jdbcType=VARCHAR}");
        sql.SET("consensus_type = #{record.consensusType,jdbcType=VARCHAR}");
        sql.SET("storage_type = #{record.storageType,jdbcType=VARCHAR}");
        sql.SET("chain_status = #{record.chainStatus,jdbcType=TINYINT}");
        sql.SET("webase_sign_addr = #{record.webaseSignAddr,jdbcType=VARCHAR}");
        sql.SET("deploy_type = #{record.deployType,jdbcType=TINYINT}");
        TbChainExample example = (TbChainExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TbChain record) {
        SQL sql = new SQL();
        sql.UPDATE("tb_chain");
        if (record.getChainName() != null) {
            sql.SET("chain_name = #{chainName,jdbcType=VARCHAR}");
        }
        if (record.getChainType() != null) {
            sql.SET("chain_type = #{chainType,jdbcType=TINYINT}");
        }
        if (record.getDescription() != null) {
            sql.SET("description = #{description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.SET("modify_time = #{modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getVersion() != null) {
            sql.SET("version = #{version,jdbcType=VARCHAR}");
        }
        if (record.getConsensusType() != null) {
            sql.SET("consensus_type = #{consensusType,jdbcType=VARCHAR}");
        }
        if (record.getStorageType() != null) {
            sql.SET("storage_type = #{storageType,jdbcType=VARCHAR}");
        }
        if (record.getChainStatus() != null) {
            sql.SET("chain_status = #{chainStatus,jdbcType=TINYINT}");
        }
        if (record.getWebaseSignAddr() != null) {
            sql.SET("webase_sign_addr = #{webaseSignAddr,jdbcType=VARCHAR}");
        }
        if (record.getDeployType() != null) {
            sql.SET("deploy_type = #{deployType,jdbcType=TINYINT}");
        }
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=LONGVARCHAR}");
        }
        sql.WHERE("chain_id = #{chainId,jdbcType=INTEGER}");
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TbChainExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_chain
     *
     * @mbg.generated
     */
    public String getOneByExample(TbChainExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("chain_id");
        } else {
            sql.SELECT("chain_id");
        }
        sql.SELECT("chain_name");
        sql.SELECT("chain_type");
        sql.SELECT("description");
        sql.SELECT("create_time");
        sql.SELECT("modify_time");
        sql.SELECT("version");
        sql.SELECT("consensus_type");
        sql.SELECT("storage_type");
        sql.SELECT("chain_status");
        sql.SELECT("webase_sign_addr");
        sql.SELECT("deploy_type");
        sql.SELECT("remark");
        sql.FROM("tb_chain");
        applyWhere(sql, example, false);
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        StringBuilder sqlBuilder = new StringBuilder(sql.toString());
        sqlBuilder.append(" limit 1 ");
        return sqlBuilder.toString();
    }
}
