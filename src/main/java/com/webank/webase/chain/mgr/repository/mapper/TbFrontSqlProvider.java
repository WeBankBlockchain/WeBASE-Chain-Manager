package com.webank.webase.chain.mgr.repository.mapper;

import org.apache.ibatis.jdbc.SQL;
import com.webank.webase.chain.mgr.repository.bean.TbFront;
import com.webank.webase.chain.mgr.repository.bean.TbFrontExample.Criteria;
import com.webank.webase.chain.mgr.repository.bean.TbFrontExample.Criterion;
import com.webank.webase.chain.mgr.repository.bean.TbFrontExample;
import java.util.List;
import java.util.Map;

public class TbFrontSqlProvider {

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public static final String ALL_COLUMN_FIELDS = "front_id,chain_id,front_peer_name,node_id,front_ip,front_port,agency,description,create_time,modify_time,front_status,version,container_name,jsonrpc_port,p2p_port,channel_port,chain_name,ext_company_id,ext_agency_id,ext_host_id,host_index,ssh_user,ssh_port,docker_port,root_on_host,node_root_on_host,front_type";

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String countByExample(TbFrontExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("tb_front");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String deleteByExample(TbFrontExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("tb_front");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String insertSelective(TbFront record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_front");
        if (record.getChainId() != null) {
            sql.VALUES("chain_id", "#{chainId,jdbcType=INTEGER}");
        }
        if (record.getFrontPeerName() != null) {
            sql.VALUES("front_peer_name", "#{frontPeerName,jdbcType=VARCHAR}");
        }
        if (record.getNodeId() != null) {
            sql.VALUES("node_id", "#{nodeId,jdbcType=VARCHAR}");
        }
        if (record.getFrontIp() != null) {
            sql.VALUES("front_ip", "#{frontIp,jdbcType=VARCHAR}");
        }
        if (record.getFrontPort() != null) {
            sql.VALUES("front_port", "#{frontPort,jdbcType=INTEGER}");
        }
        if (record.getAgency() != null) {
            sql.VALUES("agency", "#{agency,jdbcType=VARCHAR}");
        }
        if (record.getDescription() != null) {
            sql.VALUES("description", "#{description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.VALUES("modify_time", "#{modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getFrontStatus() != null) {
            sql.VALUES("front_status", "#{frontStatus,jdbcType=INTEGER}");
        }
        if (record.getVersion() != null) {
            sql.VALUES("version", "#{version,jdbcType=VARCHAR}");
        }
        if (record.getContainerName() != null) {
            sql.VALUES("container_name", "#{containerName,jdbcType=VARCHAR}");
        }
        if (record.getJsonrpcPort() != null) {
            sql.VALUES("jsonrpc_port", "#{jsonrpcPort,jdbcType=INTEGER}");
        }
        if (record.getP2pPort() != null) {
            sql.VALUES("p2p_port", "#{p2pPort,jdbcType=INTEGER}");
        }
        if (record.getChannelPort() != null) {
            sql.VALUES("channel_port", "#{channelPort,jdbcType=INTEGER}");
        }
        if (record.getChainName() != null) {
            sql.VALUES("chain_name", "#{chainName,jdbcType=VARCHAR}");
        }
        if (record.getExtCompanyId() != null) {
            sql.VALUES("ext_company_id", "#{extCompanyId,jdbcType=INTEGER}");
        }
        if (record.getExtAgencyId() != null) {
            sql.VALUES("ext_agency_id", "#{extAgencyId,jdbcType=INTEGER}");
        }
        if (record.getExtHostId() != null) {
            sql.VALUES("ext_host_id", "#{extHostId,jdbcType=INTEGER}");
        }
        if (record.getHostIndex() != null) {
            sql.VALUES("host_index", "#{hostIndex,jdbcType=INTEGER}");
        }
        if (record.getSshUser() != null) {
            sql.VALUES("ssh_user", "#{sshUser,jdbcType=VARCHAR}");
        }
        if (record.getSshPort() != null) {
            sql.VALUES("ssh_port", "#{sshPort,jdbcType=INTEGER}");
        }
        if (record.getDockerPort() != null) {
            sql.VALUES("docker_port", "#{dockerPort,jdbcType=INTEGER}");
        }
        if (record.getRootOnHost() != null) {
            sql.VALUES("root_on_host", "#{rootOnHost,jdbcType=VARCHAR}");
        }
        if (record.getNodeRootOnHost() != null) {
            sql.VALUES("node_root_on_host", "#{nodeRootOnHost,jdbcType=VARCHAR}");
        }
        if (record.getFrontType() != null) {
            sql.VALUES("front_type", "#{frontType,jdbcType=INTEGER}");
        }
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String selectByExample(TbFrontExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("front_id");
        } else {
            sql.SELECT("front_id");
        }
        sql.SELECT("chain_id");
        sql.SELECT("front_peer_name");
        sql.SELECT("node_id");
        sql.SELECT("front_ip");
        sql.SELECT("front_port");
        sql.SELECT("agency");
        sql.SELECT("description");
        sql.SELECT("create_time");
        sql.SELECT("modify_time");
        sql.SELECT("front_status");
        sql.SELECT("version");
        sql.SELECT("container_name");
        sql.SELECT("jsonrpc_port");
        sql.SELECT("p2p_port");
        sql.SELECT("channel_port");
        sql.SELECT("chain_name");
        sql.SELECT("ext_company_id");
        sql.SELECT("ext_agency_id");
        sql.SELECT("ext_host_id");
        sql.SELECT("host_index");
        sql.SELECT("ssh_user");
        sql.SELECT("ssh_port");
        sql.SELECT("docker_port");
        sql.SELECT("root_on_host");
        sql.SELECT("node_root_on_host");
        sql.SELECT("front_type");
        sql.FROM("tb_front");
        applyWhere(sql, example, false);
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        // add pagination for mysql with limit clause 
        StringBuilder sqlBuilder = new StringBuilder(sql.toString());
        if (example != null && (example.getStart() > -1 || example.getCount() > -1)) {
            sqlBuilder.append(" limit ");
            if (example.getStart() > -1 && example.getCount() > -1) {
                sqlBuilder.append(example.getStart()).append(",").append(example.getCount());
            } else if (example.getStart() > -1) {
                sqlBuilder.append(example.getStart());
            } else if (example.getCount() > -1) {
                sqlBuilder.append(example.getCount());
            }
        }
        return sqlBuilder.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TbFront record = (TbFront) parameter.get("record");
        TbFrontExample example = (TbFrontExample) parameter.get("example");
        SQL sql = new SQL();
        sql.UPDATE("tb_front");
        if (record.getFrontId() != null) {
            sql.SET("front_id = #{record.frontId,jdbcType=INTEGER}");
        }
        if (record.getChainId() != null) {
            sql.SET("chain_id = #{record.chainId,jdbcType=INTEGER}");
        }
        if (record.getFrontPeerName() != null) {
            sql.SET("front_peer_name = #{record.frontPeerName,jdbcType=VARCHAR}");
        }
        if (record.getNodeId() != null) {
            sql.SET("node_id = #{record.nodeId,jdbcType=VARCHAR}");
        }
        if (record.getFrontIp() != null) {
            sql.SET("front_ip = #{record.frontIp,jdbcType=VARCHAR}");
        }
        if (record.getFrontPort() != null) {
            sql.SET("front_port = #{record.frontPort,jdbcType=INTEGER}");
        }
        if (record.getAgency() != null) {
            sql.SET("agency = #{record.agency,jdbcType=VARCHAR}");
        }
        if (record.getDescription() != null) {
            sql.SET("description = #{record.description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getFrontStatus() != null) {
            sql.SET("front_status = #{record.frontStatus,jdbcType=INTEGER}");
        }
        if (record.getVersion() != null) {
            sql.SET("version = #{record.version,jdbcType=VARCHAR}");
        }
        if (record.getContainerName() != null) {
            sql.SET("container_name = #{record.containerName,jdbcType=VARCHAR}");
        }
        if (record.getJsonrpcPort() != null) {
            sql.SET("jsonrpc_port = #{record.jsonrpcPort,jdbcType=INTEGER}");
        }
        if (record.getP2pPort() != null) {
            sql.SET("p2p_port = #{record.p2pPort,jdbcType=INTEGER}");
        }
        if (record.getChannelPort() != null) {
            sql.SET("channel_port = #{record.channelPort,jdbcType=INTEGER}");
        }
        if (record.getChainName() != null) {
            sql.SET("chain_name = #{record.chainName,jdbcType=VARCHAR}");
        }
        if (record.getExtCompanyId() != null) {
            sql.SET("ext_company_id = #{record.extCompanyId,jdbcType=INTEGER}");
        }
        if (record.getExtAgencyId() != null) {
            sql.SET("ext_agency_id = #{record.extAgencyId,jdbcType=INTEGER}");
        }
        if (record.getExtHostId() != null) {
            sql.SET("ext_host_id = #{record.extHostId,jdbcType=INTEGER}");
        }
        if (record.getHostIndex() != null) {
            sql.SET("host_index = #{record.hostIndex,jdbcType=INTEGER}");
        }
        if (record.getSshUser() != null) {
            sql.SET("ssh_user = #{record.sshUser,jdbcType=VARCHAR}");
        }
        if (record.getSshPort() != null) {
            sql.SET("ssh_port = #{record.sshPort,jdbcType=INTEGER}");
        }
        if (record.getDockerPort() != null) {
            sql.SET("docker_port = #{record.dockerPort,jdbcType=INTEGER}");
        }
        if (record.getRootOnHost() != null) {
            sql.SET("root_on_host = #{record.rootOnHost,jdbcType=VARCHAR}");
        }
        if (record.getNodeRootOnHost() != null) {
            sql.SET("node_root_on_host = #{record.nodeRootOnHost,jdbcType=VARCHAR}");
        }
        if (record.getFrontType() != null) {
            sql.SET("front_type = #{record.frontType,jdbcType=INTEGER}");
        }
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_front");
        sql.SET("front_id = #{record.frontId,jdbcType=INTEGER}");
        sql.SET("chain_id = #{record.chainId,jdbcType=INTEGER}");
        sql.SET("front_peer_name = #{record.frontPeerName,jdbcType=VARCHAR}");
        sql.SET("node_id = #{record.nodeId,jdbcType=VARCHAR}");
        sql.SET("front_ip = #{record.frontIp,jdbcType=VARCHAR}");
        sql.SET("front_port = #{record.frontPort,jdbcType=INTEGER}");
        sql.SET("agency = #{record.agency,jdbcType=VARCHAR}");
        sql.SET("description = #{record.description,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}");
        sql.SET("front_status = #{record.frontStatus,jdbcType=INTEGER}");
        sql.SET("version = #{record.version,jdbcType=VARCHAR}");
        sql.SET("container_name = #{record.containerName,jdbcType=VARCHAR}");
        sql.SET("jsonrpc_port = #{record.jsonrpcPort,jdbcType=INTEGER}");
        sql.SET("p2p_port = #{record.p2pPort,jdbcType=INTEGER}");
        sql.SET("channel_port = #{record.channelPort,jdbcType=INTEGER}");
        sql.SET("chain_name = #{record.chainName,jdbcType=VARCHAR}");
        sql.SET("ext_company_id = #{record.extCompanyId,jdbcType=INTEGER}");
        sql.SET("ext_agency_id = #{record.extAgencyId,jdbcType=INTEGER}");
        sql.SET("ext_host_id = #{record.extHostId,jdbcType=INTEGER}");
        sql.SET("host_index = #{record.hostIndex,jdbcType=INTEGER}");
        sql.SET("ssh_user = #{record.sshUser,jdbcType=VARCHAR}");
        sql.SET("ssh_port = #{record.sshPort,jdbcType=INTEGER}");
        sql.SET("docker_port = #{record.dockerPort,jdbcType=INTEGER}");
        sql.SET("root_on_host = #{record.rootOnHost,jdbcType=VARCHAR}");
        sql.SET("node_root_on_host = #{record.nodeRootOnHost,jdbcType=VARCHAR}");
        sql.SET("front_type = #{record.frontType,jdbcType=INTEGER}");
        TbFrontExample example = (TbFrontExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(TbFront record) {
        SQL sql = new SQL();
        sql.UPDATE("tb_front");
        if (record.getChainId() != null) {
            sql.SET("chain_id = #{chainId,jdbcType=INTEGER}");
        }
        if (record.getFrontPeerName() != null) {
            sql.SET("front_peer_name = #{frontPeerName,jdbcType=VARCHAR}");
        }
        if (record.getNodeId() != null) {
            sql.SET("node_id = #{nodeId,jdbcType=VARCHAR}");
        }
        if (record.getFrontIp() != null) {
            sql.SET("front_ip = #{frontIp,jdbcType=VARCHAR}");
        }
        if (record.getFrontPort() != null) {
            sql.SET("front_port = #{frontPort,jdbcType=INTEGER}");
        }
        if (record.getAgency() != null) {
            sql.SET("agency = #{agency,jdbcType=VARCHAR}");
        }
        if (record.getDescription() != null) {
            sql.SET("description = #{description,jdbcType=VARCHAR}");
        }
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        if (record.getModifyTime() != null) {
            sql.SET("modify_time = #{modifyTime,jdbcType=TIMESTAMP}");
        }
        if (record.getFrontStatus() != null) {
            sql.SET("front_status = #{frontStatus,jdbcType=INTEGER}");
        }
        if (record.getVersion() != null) {
            sql.SET("version = #{version,jdbcType=VARCHAR}");
        }
        if (record.getContainerName() != null) {
            sql.SET("container_name = #{containerName,jdbcType=VARCHAR}");
        }
        if (record.getJsonrpcPort() != null) {
            sql.SET("jsonrpc_port = #{jsonrpcPort,jdbcType=INTEGER}");
        }
        if (record.getP2pPort() != null) {
            sql.SET("p2p_port = #{p2pPort,jdbcType=INTEGER}");
        }
        if (record.getChannelPort() != null) {
            sql.SET("channel_port = #{channelPort,jdbcType=INTEGER}");
        }
        if (record.getChainName() != null) {
            sql.SET("chain_name = #{chainName,jdbcType=VARCHAR}");
        }
        if (record.getExtCompanyId() != null) {
            sql.SET("ext_company_id = #{extCompanyId,jdbcType=INTEGER}");
        }
        if (record.getExtAgencyId() != null) {
            sql.SET("ext_agency_id = #{extAgencyId,jdbcType=INTEGER}");
        }
        if (record.getExtHostId() != null) {
            sql.SET("ext_host_id = #{extHostId,jdbcType=INTEGER}");
        }
        if (record.getHostIndex() != null) {
            sql.SET("host_index = #{hostIndex,jdbcType=INTEGER}");
        }
        if (record.getSshUser() != null) {
            sql.SET("ssh_user = #{sshUser,jdbcType=VARCHAR}");
        }
        if (record.getSshPort() != null) {
            sql.SET("ssh_port = #{sshPort,jdbcType=INTEGER}");
        }
        if (record.getDockerPort() != null) {
            sql.SET("docker_port = #{dockerPort,jdbcType=INTEGER}");
        }
        if (record.getRootOnHost() != null) {
            sql.SET("root_on_host = #{rootOnHost,jdbcType=VARCHAR}");
        }
        if (record.getNodeRootOnHost() != null) {
            sql.SET("node_root_on_host = #{nodeRootOnHost,jdbcType=VARCHAR}");
        }
        if (record.getFrontType() != null) {
            sql.SET("front_type = #{frontType,jdbcType=INTEGER}");
        }
        sql.WHERE("front_id = #{frontId,jdbcType=INTEGER}");
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TbFrontExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_front
     *
     * @mbg.generated
     */
    public String getOneByExample(TbFrontExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("front_id");
        } else {
            sql.SELECT("front_id");
        }
        sql.SELECT("chain_id");
        sql.SELECT("front_peer_name");
        sql.SELECT("node_id");
        sql.SELECT("front_ip");
        sql.SELECT("front_port");
        sql.SELECT("agency");
        sql.SELECT("description");
        sql.SELECT("create_time");
        sql.SELECT("modify_time");
        sql.SELECT("front_status");
        sql.SELECT("version");
        sql.SELECT("container_name");
        sql.SELECT("jsonrpc_port");
        sql.SELECT("p2p_port");
        sql.SELECT("channel_port");
        sql.SELECT("chain_name");
        sql.SELECT("ext_company_id");
        sql.SELECT("ext_agency_id");
        sql.SELECT("ext_host_id");
        sql.SELECT("host_index");
        sql.SELECT("ssh_user");
        sql.SELECT("ssh_port");
        sql.SELECT("docker_port");
        sql.SELECT("root_on_host");
        sql.SELECT("node_root_on_host");
        sql.SELECT("front_type");
        sql.FROM("tb_front");
        applyWhere(sql, example, false);
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        StringBuilder sqlBuilder = new StringBuilder(sql.toString());
        sqlBuilder.append(" limit 1 ");
        return sqlBuilder.toString();
    }
}
